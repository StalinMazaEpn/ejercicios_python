import pylab as pl
import numpy as np
a = float(input('Valor de a: '))
x = np.arange(-5,5,0.5)
y = a*x**2 -4
pl.plot(x,y,color="blue",label="cuadradatica")
pl.title('a*x^2')
pl.xlabel('X')
pl.ylabel('Y')
pl.legend(loc='upper center')
pl.show()


>> f='exp(x)-3*x';	función para el ejemplo (use comillas simples)
>> ezplot(f)	función básica para graficar f en [-2p , 2p ]
>> ezplot(f, [0, 2])	función básica para graficar f en un dominio dado
>> grid on	colocar cuadrículas en el dibujo
>> x=[0: 0.1: 2*pi];	puntos para evaluar alguna función
>> y=sin(x);	puntos de la función seno
>> plot(x,y);	función para graficar la función con línea contínua
>> plot(x,y,'o')	gráfico con puntos. Puede elegir: o . * + x --
>> plot(x,y,'r')	cambiar a color rojo. Puede elegir r,b,y,m,g,w,k
>> plot(x,y,'og')	grafique con círculos verdes.
>> grid on	colocar cuadrículas en el dibujo
>> title('seno de x')	incluya un título en el gráfico
>> gtext('seno de x')	posicione el texto en el gráfico con el mouse
>> xlabel('X')	rotule el eje horizontal
>> ylabel('Y')	rotule el eje vertical
>> c=[0, 2*pi, -2, 2]	defina la región para el gráfico
>> axis(c)
>> hold on	superponer siguientes gráficos
>> hold off	deshabilitar opción anterior
>> clf	borrar el gráfico
>> figure(1)	puede tener varias figuras abiertas
cada una en una ventana rotulada con 1, 2, ...
>> subplot(2,3,1)	puede dividir una figura en subgráficos.
Ej. en 2 filas y 3 columnas. Activando el gráfico 1
>> clf(1)	borra el gráfico 1
>> clf	borre todos los gráficos
>> x=[0:0.1:10};
>> y=exp(x);
>> semilogx(x,y)	graficar en escalas logarítmicas
>> semilogy(x,y)
>> loglog(x,y)	doble logarítmica
>> grid on
>> a=0:0.01:2*pi;
>> r=sin(3*a);	'rosa' de 3 pétalos
>> polar(a, r);	grafique en coordenadas polares


‘best’	0
‘upper right’	1
‘upper left’	2
‘lower left’	3
‘lower right’	4
‘right’		5
‘center left’	6
‘center right’	7
‘lower center’	8
‘upper center’	9
‘center’	10

pl.plot(X, C, color="blue", linewidth=2.5, linestyle="-", label="cosine")
pl.plot(X, S, color="red",  linewidth=2.5, linestyle="-", label="sine")

pl.legend(loc='upper left')


 savefig("archivo.png")   # Guardar en formato .png
: savefig("archivo.pdf")   # Guardar en formato .pdf



Dibujar un gráfico circular

: impr = ["b/n", "color", "dúplex", "A3"]
: vol = [25, 31, 46, 10]
: expl =(0, 0.05, 0, 0)
: pie(vol, explode=expl, labels=impr, autopct='%1.1f%%', shadow=True)
: plt.title("Impresión", bbox={"facecolor":"0.8", "pad":5})
: plt.legend()


DIBUJANDO EJES
ax.spines['right'].set_color('none')
ax.spines['top'].set_color('none')
ax.xaxis.set_ticks_position('bottom')
ax.spines['bottom'].set_position(('data',0))
ax.yaxis.set_ticks_position('left')
ax.spines['left'].set_position(('data',0))

pl.plot(x,y,color="blue",label="cuadratica")
#pl.xlim(x.min() * 1.1, x.max() * 1.1)  #para ver de mejor manera
#pl.ylim(y.min() * 1.1, y.max() * 1.1)  #nuestro grafico 

x = np.arange(-5,5,0.1)


#x = np.arange(-10,10,0.5)
x = np.arange(1,10,0.1)
y = a * exp(x)    #exponencial
#y = a * log(x)   #logaritmica

sin
cos
tan

http://pybonacci.org/2012/05/25/manual-de-introduccion-a-matplotlib-pyplot-iii-configuracion-del-grafico/